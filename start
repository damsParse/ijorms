While thinking about the project, I have not come up with a great idea. This project is basically more targeted to the best way of parsing a resume. This portion of the project is the most cumbersome. There are tons of varieties of writing a resume. Some write in straightforward line by line description basis. Some like to use tables to describe contents in a resume. Some use multicolumn format. Some make use of unwanted(in our case) graphics in the resume. These variations are nothing but increasing the complexity of the project. Although we haven't yet started the project, there has been some research done in the fields that are likely to be covered by this project. The best approach we think is the use of NERs in the extraction of the resume successfully. Hoping that lines in the resume are read properly, we can make an skeleton of things that we, in general, expect to extract from the resume. This works because we don't need to process each and every text present in the resume with equal priority. We can just focus on the things that are required in the skeleton. A simple skeleton may have three sections like Personal details, Education details and Skills. This can be constructed as per the job requirement description. A job, for instance, requiring a Computer Engineer with 3 years experience in Java can have a skeleton in the education section with sub-sections Bachelors and the section with sub-section Programming language. These are the things that can be hardcoded for the initial phase because a hiring company can do this ease from its existing database for the job. 
The problem lies in extracting the relevant content from the resume. The resume, if rendered properly, can have different instances where a person's name has been mentioned in it. We need a model that can find which name is the name of the job-seeker. 

Named Entity Recognition
...........................


